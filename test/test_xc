#!/usr/bin/ruby

$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
require "coord"
require "igc"
require "optparse"
require "xc"

module Radians

  class << self

    def to_dmh(rad, hemispheres)
      deg, min = (60.0 * rad * 180.0 / Math::PI).divmod(60)
      "%d'%06.3f%s" % [deg.abs, min, hemispheres[deg <=> 0, 1]]
    end

  end

end

module XC

  class Turnpoint

    def to_s
      "%s: %s %s %dm (%s)" % [@name, Radians.to_dmh(@lat, "NNS"), Radians.to_dmh(@lon, "EEW"), @alt, @time.to_s]
    end

  end

end

def main(argv)
  league = XC::Open
  memoize = false
  OptionParser.new do |op|
    op.on("-m", "--memoize", "Memoize") do
      memoize = true
    end
    op.on("-x", "--xc-league LEAGUE", XC.leagues_hash, "XC league") do |arg|
      league = arg
    end
    op.parse!(argv)
  end
  argv.each do |arg|
    igc = IGC.new(File.open(arg))
    if memoize
      xcs = league.memoized_optimize(igc.bsignature, igc.fixes)
    else
      xcs = league.optimize(igc.fixes)
    end
    xcs.each do |xc|
      puts("League-Name: #{xc.league.name}")
      puts("League-Description: #{xc.league.description}")
      puts("Type: #{xc.type}")
      xc.turnpoints.each do |turnpoint|
        puts(turnpoint)
      end
      puts("Distance: #{xc.distance / 1000.0}km")
      puts("Multiplier: #{xc.multiplier}")
      puts("Score: %.1f points" % xc.score)
      if xc.circuit?
        puts("#{xc.turnpoints[-1].name}-#{xc.turnpoints[0].name}: #{xc.turnpoints[0].distance_to(xc.turnpoints[-1]) / 1000.0}km")
      end
      puts
    end
  end
end

main(ARGV) if $0 == __FILE__
