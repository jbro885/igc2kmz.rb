#!/usr/bin/ruby

$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))

require "rubygems"
require "RMagick"
require "kml"
require "opengl"
require "optparse"
require "streetmap"

class Range

  def divide_into(n)
    0.upto(n - 1) do |i|
      from = i * (last - first) / n + first
      to = (i + 1) * (last - first) / n + first
      yield(from, to)
    end
    self
  end

end

module Magick

  class Image

    def to_gl_texture(tex_parameters = {})
      texture = Gl.glGenTextures(1)[0]
      Gl.glBindTexture(Gl::GL_TEXTURE_2D, texture)
      tex_parameters.each do |key, value|
        Gl.glTexParameteri(GL::GL_TEXTURE_2D, key, value)
      end
      data = export_pixels_to_str(0, 0, columns, rows, "RGBA", Magick::FloatPixel)
      Gl.glTexImage2D(Gl::GL_TEXTURE_2D, 0, Gl::GL_RGBA, columns, rows, 0, Gl::GL_RGBA, Gl::GL_FLOAT, data)
      texture
    end

    class << self

      def new_from_gl(x, y, width, height)
        image = new(width, height)
        data = Gl.glReadPixels(x, y, width, height, Gl::GL_RGBA, Gl::GL_FLOAT)
        image.import_pixels(0, 0, width, height, "RGBA", data, Magick::FloatPixel)
        image
      end

    end

  end

end

module Glut

  class Application

    def initialize(width, height)
      glutInit
      glutInitDisplayMode(GLUT_RGB)
      glutInitWindowSize(width, height)
      glutInitWindowPosition(2500, 0)
      @window = glutCreateWindow($0)
      glutDisplayFunc(self.method(:display).to_proc) if self.respond_to?(:display)
      glutReshapeFunc(self.method(:reshape).to_proc) if self.respond_to?(:reshape)
      glutIdleFunc(self.method(:idle).to_proc) if self.respond_to?(:idle)
      glutKeyboardFunc(self.method(:keyboard).to_proc) if self.respond_to?(:keyboard)
    end

    def main
      glutMainLoop
    end

    def keyboard(key, x, y)
      case key
      when 27
        glutDestroyWindow(@window)
        throw :exit
      end
      glutPostRedisplay
    end

  end

end

class StreetmapToKML < Glut::Application

  def initialize(width, height)
    @zoom = 3
    @tile_scale = Streetmap::TILE_SCALE[@zoom]
    @tile_size = Streetmap::TILE_SIZE[@zoom]
    @width, @height = width, height
    @count = 0
    super(width, height)
    glClearColor(0.0, 0.0, 0.0, 0.0)
    glEnable(GL_TEXTURE_2D)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity
    glViewport(0, 0, width, height)
  end

  def display
    @count += 1
    return if @count != 2
    @folder = KML::Folder.new
    tile_delta = Radians.new_from_s("0 2")
    delta = tile_delta / 1.0
    Radians.new_from_s("3 12 W").step(Radians.new_from_s("3 0 W"), tile_delta) do |lon0|
      lon1 = lon0 + tile_delta
      Radians.new_from_s("54 28 N").step(Radians.new_from_s("54 40 N"), tile_delta) do |lat0|
        lat1 = lat0 + tile_delta
        grid0 = Geoid::NationalGrid.wgs84_coord_to_grid(Coord.new(lat0, lon0, 0.0))
        grid1 = Geoid::NationalGrid.wgs84_coord_to_grid(Coord.new(lat1, lon1, 0.0))
        map = Streetmap::Map.new([grid0, grid1], @zoom)
        texture = map.image.to_gl_texture(GL_TEXTURE_MIN_FILTER => GL_LINEAR, GL_TEXTURE_MAG_FILTER => GL_LINEAR)
        glClear(GL_COLOR_BUFFER_BIT)
        glBindTexture(GL_TEXTURE_2D, texture)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity
        glOrtho(lon0, lon1, lat0, lat1, -1, 1)
        lat0.step(lat1, tile_delta) do |lata|
          latb = lata + tile_delta
          glBegin(GL_QUAD_STRIP)
          point(map, lata, lon0)
          point(map, latb, lon0)
          lon0.step(lon1, tile_delta) do |lona|
            lonb = lona + tile_delta
            point(map, lata, lonb)
            point(map, latb, lonb)
          end
          glEnd
        end
        glDeleteTextures([texture])
        tile_filename = "streetmap-#{lat0}-#{lon0}.png"
        Magick::Image.new_from_gl(0, 0, @width, @height).flip!.flop!.write(tile_filename)
        icon = KML::Icon.new(:href => tile_filename)
        lat_lon_box = KML::LatLonBox.new(:north => Math.rad_to_deg(lat1), :south => Math.rad_to_deg(lat0), :east => Math.rad_to_deg(lon0), :west => Math.rad_to_deg(lon1))
        ground_overlay = KML::GroundOverlay.new(icon, lat_lon_box)
        @folder.add(ground_overlay)
      end
    end
    File.open("streetmap.kml", "w") do |io|
      KML.new(@folder).pretty_write(io)
    end
    throw :exit
  end

  def point(map, lat, lon)
    grid = Geoid::NationalGrid.wgs84_coord_to_grid(Coord.new(lat, lon, 0.0))
    s = (grid.east - map.grid0.east) / (map.grid1.east - map.grid0.east)
    t = 1.0 - (grid.north - map.grid0.north) / (map.grid1.north - map.grid0.north)
    glTexCoord2f(s, t)
    glVertex2f(lon, lat)
  end

end

def main(argv)
  catch :exit do
    StreetmapToKML.new(512, 512).main
  end
  nil
end

exit(main(ARGV) || 0) if $0 == __FILE__
