#!/usr/bin/ruby

$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
require "coord"
require "igc"
require "optparse"
require "xc"

module Radians

  class << self

    def to_dmh(rad, hemispheres)
      deg, min = (60.0 * rad * 180.0 / Math::PI).divmod(60)
      "%d'%06.3f%s" % [deg.abs, min, hemispheres[deg <=> 0, 1]]
    end

  end

end

module XC

  class Turnpoint

    def to_s
      "%s: %s %s %dm (%s)" % [@name, Radians.to_dmh(@lat, "NNS"), Radians.to_dmh(@lon, "EEW"), @alt, @time.to_s]
    end

  end

  league :XContest, "XContest", 15000.0, "Start", "TP%d", "Finish", {
    :Open0       => { :turnpoints => 0, :type => "CL2" },
    :Open1       => { :turnpoints => 1, :type => "CL3" },
    :Open2       => { :turnpoints => 2, :type => "CL4" },
    :Open3       => { :turnpoints => 3, :type => "CL5" },
    :Circuit3    => { :turnpoints => 3, :type => "FLAT TRIANGLE", :circuit => true },
    :Circuit3FAI => { :turnpoints => 3, :type => "FAI TRIANGLE",  :circuit => true },
  }

  class XContest

    CLASSES = {
      "CL2" => Open0,
      "CL3" => Open1,
      "CL4" => Open2,
      "CL5" => Open3, 
      "FLAT TRIANGLE" => Circuit3,
      "FAI TRIANGLE" => Circuit3FAI,
    }

  end

end

def main(argv)
  argv.each do |arg|
    xcs = []
    igc = IGC.new(File.open(arg))
    File.open(File.join("tmp", "xcontest", File.basename(arg) + ".result")) do |result|
      klass = turnpoints = nil
      result.each do |line|
        next if /\A\s*\z/.match(line)
        if !klass
          klass = XC::XContest::CLASSES[line.strip]
        elsif !turnpoints
          turnpoints = line.split(/\s+/).collect(&:to_i).collect(&igc.fixes.method(:[]))
        elsif /\Alen=(\d+(?:\.\d+))\s*\z/.match(line)
          xcs << klass.new(turnpoints)
          klass = turnpoints = nil
        end
      end
    end
    xcs.each do |xc|
      puts("League-Name: #{xc.league.name}")
      puts("League-Description: #{xc.league.description}")
      puts("Type: #{xc.type}")
      xc.turnpoints.each do |turnpoint|
        puts(turnpoint)
      end
      puts("Distance: #{xc.distance / 1000.0}km")
      puts("Multiplier: #{xc.multiplier}")
      puts("Score: %.1f points" % xc.score)
      if xc.circuit?
        puts("#{xc.turnpoints[-1].name}-#{xc.turnpoints[0].name}: #{xc.turnpoints[0].distance_to(xc.turnpoints[-1]) / 1000.0}km")
      end
      puts
    end
  end
end

main(ARGV) if $0 == __FILE__
