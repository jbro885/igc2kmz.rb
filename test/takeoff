#!/usr/bin/ruby

$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
require "cgiarcsi"
require "coord"
require "iconv"
require "kml"
require "optparse"
require "lib"
require "ratcliff"
require "yaml"

class WeightedCoord < Coord

  attr_reader :weight, :names

  def initialize(coord, weight, names)
    super(coord.lat, coord.lon, coord.alt)
    @weight = weight
    @names = names
  end

  def merge(other)
    result = self.class.new(interpolate(other, other.weight / (@weight + other.weight)), @weight + other.weight, @names.merge(other.names))
    result.alt = @alt if other.alt.zero?
    result.alt = other.alt if @alt.zero?
    result
  end

  def popular_names
    # FIXME this should be O(N^2/2) rather than O(N^2)
    popularities = Hash.new(0)
    n = @names.keys
    n.each do |n1|
      n.each do |n2|
        similarity = n1.ratcliff(n2)
        popularities[n1] += similarity
        popularities[n2] += similarity
      end
    end
    popularities.keys.sort_by { |k| -popularities[k] }
  end

  def to_compegps(short_name)
    name = "%s%03d %s" % [short_name, (@alt + 5) / 10, popular_names[0].upcase]
    "W  %s A %.10f\xba%s %.10f\xba%s 01-JAN-2000 00:00:00 %.6f %s" % [name.gsub(/\W+/, ""), Radians.to_deg(@lat).abs, @lat < 0.0 ? "S" : "N", Radians.to_deg(@lon).abs, @lon < 0.0 ? "W" : "E", @alt, name]
  end

  def to_kml(short_name, style)
    placemark = KML::Placemark.new(KML::Point.new(:coordinates => self))
    pnames = popular_names
    placemark.name = "%s%03d %s" % [short_name, (@alt + 5) / 10, pnames[0].upcase]
    placemark.description = KML::CData.new(pnames[1..-1].join("<br/>")) if pnames.length > 1
    placemark.style_url = style.url
    placemark
  end

end

def main(argv)
  format = :kml
  threshold = 500.0
  OptionParser.new do |op|
    op.on("--format=VALUE", "-f", [:compegps, :kml]) do |arg|
      format = arg
    end
    op.on("--threshold=VALUE", "-t", Numeric) do |arg|
      threshold = arg
    end
    op.parse!(argv)
  end
  coords = []
  argv.each do |filename|
    File.open(filename) do |io|
      io.each do |line|
        next unless md = /\AB\d{6}(\d\d)(\d{5})([NS])(\d{3})(\d{5})([EW])[AV]\d{5}(\d{5})/.match(line)
        lat = Radians.new_from_deg((md[1].to_i + 0.001 * md[2].to_i / 60) * (md[3] == "N" ? 1 : -1))
        lon = Radians.new_from_deg((md[4].to_i + 0.001 * md[5].to_i / 60) * (md[6] == "E" ? 1 : -1))
        alt = md[7].to_i
        name = File.open(filename.sub(/\.igc\z/i, ".cfd")) do |io|
          YAML.load(io)["Decollage"]
        end
        name.gsub!(/[\xe0-\xe5]/, "a")
        name.gsub!(/\xe7/, "c")
        name.gsub!(/[\xe8-\xeb]/, "e")
        name.gsub!(/[\xcc-\xcf\xec-\xef]/, "i")
        name.gsub!(/[\xf2-\xf6]/, "o")
        name.gsub!(/[\xf9-\xfc]/, "u")
        name.gsub!(/[\x80-\xff]+/, "")
        name.gsub!(/\s*-\s*/, " ")
        name.gsub!(/\bdeco(llage)?(\s+de)?\s*/i, "")
        name.gsub!(/\b(st|sainte?)\b\s*/i, "st ")
        name.gsub!(/\bm(t|ont|ontagne)\b\s*/i, "")
        name.downcase!
        coords << WeightedCoord.new(Coord.new(lat, lon, alt), 1, {name => 1})
        break
      end
    end
  end
  takeoffs = []
  coords.each do |coord|
    neighbours = []
    takeoffs.delete_if do |takeoff|
      if takeoff.distance_to(coord) < threshold
        neighbours << takeoff
        true
      else
        false
      end
    end
    takeoffs << neighbours.inject(coord) do |coord1, coord2|
      coord1.merge(coord2)
    end
  end
  takeoffs.each do |takeoff|
    takeoff.alt = CGIARCSI::SRTM90mDEM[Radians.to_deg(takeoff.lat), Radians.to_deg(takeoff.lon)]
  end
  case format
  when :compegps
    puts("G  WGS 84")
    puts("U  1")
    short_name = "A00"
    takeoffs.each do |takeoff|
      next if takeoff.weight < 2
      puts(takeoff.to_compegps(short_name.succ!))
    end
  when :kml
    document = KML::Document.new
    icon_style = KML::IconStyle.new(KML::Icon.default, :scale => 0.5)
    style = KML::Style.new(icon_style)
    document.add(style)
    short_name = "A00"
    takeoffs.each do |takeoff|
      next if takeoff.weight < 2
      document.add(takeoff.to_kml(short_name.succ!, style))
    end
    KML.new(document).pretty_write($stdout)
  end
end

main(ARGV) if $0 == __FILE__
