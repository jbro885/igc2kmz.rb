#!/usr/bin/ruby

require "rubygems"
require "hpricot"
require "net/http"
require "open-uri"
require "optparse"
require "uri"
require "yaml"

def main(args)
  uris = []
  verbose = false
  year = nil
  OptionParser.new do |op|
    op.on("-a", "--all") do
      uris << "http://cfd.ffvl.fr/cfd/cfdSmartList.php?&pTypeList=all&pSelect=igcFile+%21%3D+%27%27+"
    end
    op.on("-l", "--last") do
      uris << "http://cfd.ffvl.fr/cfd/cfdListLast.php"
    end
    op.on("-v", "--verbose") do
      verbose = true
    end
    op.on("-y", "--year YEAR", Integer) do |arg|
      year = arg
    end
    op.parse!(args)
  end
  uris.concat(args)
  header = {}
  Net::HTTP.start("cfd.ffvl.fr") do |http|
    if year
      http.request_get("/cfd/cfd.php?cfdYear=#{year}") do |response|
        header["Cookie"] = response["set-cookie"]
      end
    end
  end
  while !uris.empty?
    uri = uris.shift
    uri = URI.parse(uri) unless uri.is_a?(URI)
    $stderr.puts(uri) if verbose
    body = nil
    open(uri, header) do |io|
      body = io.read
    end
    Hpricot(body).search("//table/tr").each do |tr|
      tds = tr.search("/td")
      next unless tds.size == 12
      a = tds[9].at("/a[@href]")
      next unless a
      md = /pIgcFile=([^&]*)/.match(a["href"])
      next unless md
      meta = {"Trace GPS" => md[1]}
      unless FileTest.exist?(meta["Trace GPS"])
        $stderr.puts("\t#{meta["Trace GPS"]}") if verbose
        open(uri + a["href"].sub(/\AigcShow/, "getIgcFile")) do |igc|
          igc_data = igc.read
          File.open(meta["Trace GPS"], "w") do |file|
            file.write(igc_data)
          end
        end
      end
      {"Nom du pilote" => 0, "Club" => 1, "Date du vol" => 2, "Dep." => 4}.each do |key, index|
        meta[key] = tds[index].at("/a").inner_html
      end
      md = /(\d+)\/(\d+)\/(\d+)/.match(meta["Date du vol"])
      begin
        meta["Date du vol"] = Date.new(md[3].to_i, md[2].to_i, md[1].to_i)
      rescue ArgumentError
        meta["Date du vol"] = nil
      end
      {"Type de vol" => 3, "Decollage" => 5, "Atterissage" => 6, "Balises" => 7, "Dist." => 10, "Points" => 11}.each do |key, index|
        meta[key] = tds[index].inner_html
      end
      meta["Dist."] = meta["Dist."].to_f
      meta["Points"] = meta["Points"].to_f
      File.open(File.basename(meta["Trace GPS"], ".igc") + ".cfd", "w") do |file|
        file.write(meta.to_yaml)
      end
    end
    Hpricot(body).search("//a[@href]").each do |a|
      next unless /\ALes\s+\d+\s+lignes\s+suivantes\s+-->\z/.match(a.inner_html)
      uris.unshift(uri + a["href"])
    end
  end
end

main(ARGV) if $0 == __FILE__
