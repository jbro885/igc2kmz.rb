#!/usr/bin/ruby

$:.unshift File.dirname(__FILE__) + "/../lib"
require "camping"
require "igc/kmz"
require "mongrel"
require "ostruct"
require "tempfile"
require "units"
require "xc"

Camping.goes :Igc2kmz

module Igc2kmz::Views

  EMAIL = "maximumxc@maximumxc.com"
  XC_TYPES = XC::LEAGUES.collect do |league|
    [league.name.split(/::/)[-1], league.description || "None"]
  end
  UNITS = Units::GROUPS.keys.collect(&:to_s).sort.collect do |group|
    [group.to_sym, group]
  end

  def _a_mailto(email)
    a :href => _entities("mailto:#{email}") do
      _entities email
    end
  end

  def _entities(s)
    result = ""
    s.each_byte { |byte| result << "&#x%x;" % byte }
    result
  end

  def _select(options, selected = nil, attributes = {})
    select attributes do
      options.each do |key, value|
        h = {:value => key}
        h[:selected] = 1 if key == selected
        option value, h
      end
    end
  end

  def layout
    html do
      head do
        title "maximumxc.com"
        link :href => R(Stylesheet), :rel => "stylesheet", :type => "text/css"
      end
      body do
        h1 "maximumxc.com"
        div.content do
          self << yield
        end
        p do
          small do
            "copyright &copy; 2007 maximumxc.com" +
            " &middot; " +
            _a_mailto(EMAIL)
          end
        end
      end
    end
  end

  def index
    form :action => R(Index), :method => "post", :enctype => "multipart/form-data" do
      div.row do
        label "IGC file", :for => "igc"
        span.formw do
          input.igc! :type => "file", :name => "igc"
        end
      end
      div.row do
        label "XC League", :for => "league"
        span.formw do
          _select XC_TYPES, @league, :id => "league", :name => "league"
        end
      end
      div.row do
        label "Timezone offset", :for => "tz_offset"
        span.formw do
          input.tz_offset! :type => "text", :name => "tz_offset", :value => @tz_offset, :size => 8
        end
      end
      div.row do
        label "Color", :for => "color"
        span.formw do
          input.color! :type => "text", :name => "color", :value => @color, :size => 8
        end
      end
      div.row do
        label "Width", :for => "width"
        span.formw do
          input.width! :type => "text", :name => "width", :value => @width, :size => 8
        end
      end
      div.row do
        label "Units", :for => "units"
        span.formw do
          _select UNITS, @units, :id => "units", :name => "units"
        end
      end
      div.row do
        input :type => "submit", :value => "convert"
      end
    end
    p do
      a "Get Google Earth 4", :href => "http://earth.google.com/download-earth.html"
    end
  end

end

module Igc2kmz::Controllers

  class Index < R "/"

    def get
      @league = input.league.default(:Open) { self.to_sym }
      @tz_offset = input.tz_offset || "+2"
      @color = input.color || "red"
      @width = input.width || 2
      @units = input.units || :metric
      render :index
    end

    def post
      filename = input.igc.filename.gsub(/[^\x20-\x7f]/, "")
      @headers["Content-Type"] = "application/vnd.google-earth.kmz"
      @headers["Content-Disposition"] = "attachment; filename=#{filename}.kmz"
      hints = IGC.default_hints
      hints.name = filename
      hints.color = KML::Color.color(input.color) if input.color
      hints.league = XC.const_get(input.league) if input.league
      if input.tz_offset
        md = /\A\s*([+\-])?([0-9]|1[01])(?::([0-5][0-9]))?\s*\z/.match(input.tz_offset)
        hints.tz_offset = (60 * md[2].to_i + md[3].to_i) * (md[1] == "-" ? -60 : 60) if md
      end
      hints.width = input.width.to_i.constrain(1) if input.width
      hints.units = Units::GROUPS[input.units.to_sym] || Units::GROUPS[:metric]
      Tempfile.open(filename) do |tempfile|
        IGC.new(input.igc.tempfile).to_kmz(hints).write(tempfile.path)
        return tempfile.read
      end
    end

  end

  class Stylesheet < R "/css/igc2kmz.css"

    def get
      @headers["Content-Type"] = "text/css"
      @@data ||= DATA.read
    end

  end

end

def main(args)
  options = OpenStruct.new
  options.address = "0.0.0.0"
  options.port = 3301
  OptionParser.new do |op|
    op.on("-a", "--address ADDRESS") do |arg|
      options.address = arg
    end
    op.on("-p", "--port PORT", Integer) do |arg|
      options.port = arg
    end
    op.on("-h", "--help") do
      puts(op)
      exit
    end
    op.parse!
  end
  Mongrel::Camping::start(options.address, options.port, "/", Igc2kmz).run.join
end

main(ARGV) if $0 == __FILE__
__END__
body {
  font-family: verdana, arial, sans-serif;
  text-align: center;
}

h1 {
  font-weight: bold;
}

h2, h3, h4, h5 {
  font-weight: normal;
}

form {
  float: none;
}

div.row {
  clear: both;
  padding: 10px;
  /*width: 512px;*/
  text-align: center;
  border: 4px;
}

div.row label {
  float: left;
  width: 256px;
  text-align: right;
  border: 4px;
}

div.row span.formw {
  float: left;
  text-align: left;
  padding: 4px;
}
